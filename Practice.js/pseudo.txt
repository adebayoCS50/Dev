Sure, here's a practical example of how prototypes are used in JavaScript.

Let's say we want to create a simple program that simulates a bank account. We want each bank account object to have a balance, and methods to deposit and withdraw money from the account.

Instead of defining the deposit and withdraw methods on each individual account object, we can use prototypes to define these methods on a prototype object that all account objects inherit from.

Here's an example code snippet that demonstrates this:

javascript
Copy code
function BankAccount(initialBalance) {
  this.balance = initialBalance;
}

BankAccount.prototype.deposit = function(amount) {
  this.balance += amount;
};

BankAccount.prototype.withdraw = function(amount) {
  if (this.balance >= amount) {
    this.balance -= amount;
  } else {
    console.log("Insufficient funds");
  }
};
In this example, we define the BankAccount constructor function, which takes an initialBalance argument and assigns it to the balance property of the newly created object using this.balance = initialBalance;.

We then define the deposit and withdraw methods on the BankAccount.prototype object. These methods can access the balance property of the account object using the this keyword.

Now, we can create new bank account objects using the new keyword and the BankAccount constructor function, and each account object will have access to the deposit and withdraw methods defined on the BankAccount.prototype object:

javascript
Copy code
const account1 = new BankAccount(100);
const account2 = new BankAccount(500);

account1.deposit(50);
account1.withdraw(25);

console.log(account1.balance); // Output: 125

account2.deposit(1000);
account2.withdraw(2000); // Output: "Insufficient funds"

console.log(account2.balance); // Output: 1500
In this example, we create two bank account objects, account1 and account2, using the BankAccount constructor function. We then call the deposit and withdraw methods on each account object to modify their respective balances.